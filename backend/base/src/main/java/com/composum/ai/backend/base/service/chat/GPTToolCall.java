package com.composum.ai.backend.base.service.chat;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.annotation.Nullable;

/**
 * Represents a tool call generated by the model in a chat completion response.
 * This can be a function call with specific arguments.
 */
public class GPTToolCall {

    private final String id;
    private final String type;
    private final GPTFunctionCallDetails function;

    /**
     * Creates the object
     *
     * @param id       The ID of the tool call.
     * @param type     The type of the tool, currently only "function" is supported.
     * @param function The function being called by the model, including its name and arguments.
     */
    public GPTToolCall(String id, String type, GPTFunctionCallDetails function) {
        this.id = id;
        this.type = type;
        this.function = function;
    }

    /**
     * The ID of the tool call.
     */
    public String getId() {
        return id;
    }

    /**
     * The type of the tool, currently only "function" is supported.
     */
    public String getType() {
        return type;
    }

    /**
     * The function being called by the model, including its name and arguments.
     */
    public GPTFunctionCallDetails getFunction() {
        return function;
    }

    /**
     * String representation for debugging.
     */
    @Override
    public String toString() {
        return "GPTFunctionCallDetails{" +
                "id='" + id + '\'' +
                ", type='" + type + '\'' +
                ", function=" + function +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof GPTToolCall)) return false;
        GPTToolCall that = (GPTToolCall) o;
        return Objects.equals(getId(), that.getId()) &&
                Objects.equals(getType(), that.getType()) &&
                Objects.equals(getFunction(), that.getFunction());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getType(), getFunction());
    }

    /**
     * When streaming, this merges the delta received during the stream.
     */
    public GPTToolCall mergeDelta(@Nullable GPTToolCall other) {
        if (other == null) {
            return this;
        }
        if (id != null && other.id != null && !id.equals(other.id)) {
            throw new IllegalArgumentException("Bug: trying to merge tool calls with different IDs: " + id + " and " + other.id);
        }
        String newId = id == null ? other.id : id;
        String newType = type == null ? other.type : type;
        GPTFunctionCallDetails newFunction = function == null ? other.function : function.mergeDelta(other.function);
        return new GPTToolCall(newId, newType, newFunction);
    }

    /**
     * When streaming, this merges the delta received during the stream.
     */
    @Nullable
    public static List<GPTToolCall> mergeDelta(@Nullable List<GPTToolCall> calls1, @Nullable List<GPTToolCall> calls2) {
        if (calls1 == null || calls1.isEmpty()) {
            return calls2;
        }
        if (calls2 == null || calls2.isEmpty()) {
            return calls1;
        }
        int maxIndex = Math.max(calls1.size(), calls2.size());
        List<GPTToolCall> calls = new ArrayList<>(maxIndex + 1);
        for (int i = 0; i < maxIndex; i++) {
            GPTToolCall call1 = i < calls1.size() ? calls1.get(i) : null;
            GPTToolCall call2 = i < calls2.size() ? calls2.get(i) : null;
            if (call2 == null) {
                calls.add(call1);
            } else if (call1 == null) {
                calls.add(call2);
            } else {
                calls.add(call1.mergeDelta(call2));
            }
        }
        return calls;
    }

}
