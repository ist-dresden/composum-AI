package com.composum.ai.backend.base.service.chat.impl.chatmodel;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import com.composum.ai.backend.base.service.chat.GPTToolCall;
import com.google.gson.annotations.SerializedName;

/**
 * Represents a tool call generated by the model in a chat completion response.
 * This can be a function call with specific arguments.
 */
public class ChatCompletionToolCall {

    /**
     * The ID of the tool call.
     */
    @SerializedName("id")
    private String id;

    /**
     * The index of the tool call in the list of tool calls.
     */
    @SerializedName("index")
    private int index;

    /**
     * The type of the tool, currently only "function" is supported.
     */
    @SerializedName("type")
    private String type;

    /**
     * The function being called by the model, including its name and arguments.
     */
    @SerializedName("function")
    private ChatCompletionFunctionCallDetails function;

    // Getters and setters

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public ChatCompletionFunctionCallDetails getFunction() {
        return function;
    }

    public void setFunction(ChatCompletionFunctionCallDetails function) {
        this.function = function;
    }

    @Nullable
    public static List<ChatCompletionToolCall> mergeDelta(@Nullable List<ChatCompletionToolCall> calls1,
                                                          @Nullable List<ChatCompletionToolCall> calls2) {
        if (calls1 == null || calls1.isEmpty()) {
            return calls2;
        }
        if (calls2 == null || calls2.isEmpty()) {
            return calls1;
        }
        int maxIndex = Math.max(
                calls1.stream().mapToInt(ChatCompletionToolCall::getIndex).max().orElse(0),
                calls2.stream().mapToInt(ChatCompletionToolCall::getIndex).max().orElse(0)
        );
        List<ChatCompletionToolCall> calls = new ArrayList<>(maxIndex + 1);
        for (int i = 0; i <= maxIndex; i++) {
            calls.add(null);
        }
        for (ChatCompletionToolCall call : calls1) {
            if (call != null) {
                calls.set(call.getIndex(), call);
            }
        }
        for (ChatCompletionToolCall call : calls2) {
            if (call != null) {
                if (calls.get(call.getIndex()) != null) {
                    calls.get(call.getIndex()).mergeDelta(call);
                } else {
                    calls.set(call.getIndex(), call);
                }
            }
        }
        return calls;
    }

    public void mergeDelta(@Nullable ChatCompletionToolCall other) {
        if (other == null) {
            return;
        }
        if (index != other.index) {
            throw new IllegalArgumentException("Cannot merge tool calls with different indices");
        }
        if (id == null) {
            id = other.id;
        }
        if (type == null) {
            type = other.type;
        }
        if (function == null) {
            function = other.function;
        } else {
            function.mergeDelta(other.function);
        }
    }

    @Nonnull
    public GPTToolCall toGptToolCall() {
        return new GPTToolCall(id, type, function != null ? function.toGptFuctionCallDetails() : null);
    }

    /**
     * Turns the list into a {@link GPTToolCall} list observing the {@link #getIndex()}.
     */
    @Nullable
    public static List<GPTToolCall> toGptToolCallList(List<ChatCompletionToolCall> list) {
        if (list == null) {
            return null;
        }
        List<GPTToolCall> res = new ArrayList<>();
        int maxIndex = list.stream().mapToInt(ChatCompletionToolCall::getIndex).max().orElse(0);
        for (int i = 0; i <= maxIndex; ++i) {
            res.add(null);
        }
        for (ChatCompletionToolCall chatCompletionToolCall : list) {
            if (chatCompletionToolCall != null) {
                res.set(chatCompletionToolCall.index, chatCompletionToolCall.toGptToolCall());
            }
        }
        return res;
    }

}
